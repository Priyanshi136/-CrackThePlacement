/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Double> averageOfLevels(TreeNode root) {
        
        List<Double> ans = new ArrayList<>();
        Queue<TreeNode> pendingNodes = new LinkedList<>();
        pendingNodes.add(root);
        pendingNodes.add(null);
        while(pendingNodes.peek() != null){
            long small = 0;
            int count = 0;
            while(pendingNodes.peek() != null){
                TreeNode front = pendingNodes.remove();
                if(front.left != null){
                    pendingNodes.add(front.left);
                }
                if(front.right != null){
                    pendingNodes.add(front.right);
                }
                small += front.val;
                count++;
            }
            pendingNodes.remove();
            pendingNodes.add(null);
            double temp = small/(double)count;
            ans.add(temp);
        }
        return ans;
    }
}
