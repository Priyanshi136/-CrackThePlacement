class Solution {
    // Function to find the number of islands.
    public int numIslands(char[][] grid) {
        // Code here
        int count = 0;
        int row = grid.length;
        int col = grid[0].length;
        
        boolean visited[][] = new boolean[row][col];
        for(int i = 0; i < row; i++){
            for(int j = 0; j < col; j++){
                if(grid[i][j] == '1' && !visited[i][j]){
                    DFS(grid, i, j, visited);
                    count++;
                }
            }
        }
        
        return count;
    }
    
    public void DFS(char[][] grid, int row, int col, boolean visited[][]){
        
        int rn[] = new int[] {-1, -1, -1, 0, 0, 1, 1, 1 };
        int cn[] = new int[] {-1, 0, 1, -1, 1, -1, 0, 1};
        
        visited[row][col] = true;
        
        for(int i = 0; i < 8; i++){
            if(isSafe(grid, row+rn[i], col+cn[i], visited))
                DFS(grid, row+rn[i], col+cn[i], visited);
        }
    }
    
    public boolean isSafe(char grid[][], int row, int col, boolean visited[][]){
        
        int Row = grid.length;
        int Col = grid[0].length;
        
        return (row>= 0) && (row<Row) &&(col>=0) && (col<Col) && (grid[row][col] == '1' && !visited[row][col]);
    }
}
