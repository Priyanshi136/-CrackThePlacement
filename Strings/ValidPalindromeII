class Solution {
    public boolean validPalindrome(String s) {
        
        /* using two pointer, time complexity -> O(N) because outer while loop will run for N/2 and if any one deletion is possible, 
        then also we run atmost upto n/2 times, inner loop. And space -> O(1).
        */
        
        int i = 0, j = s.length()-1;
        while(i < j){
            if(s.charAt(i) != s.charAt(j)){
                if(helper(s, i, j-1)){
                    return true;
                }else if(helper(s, i+1, j)){
                        return true;
                }else{
                    return false;
                }
                
                // OR, both means same and works same.
                
                // return helper(s, i, j-1) || helper(s, i+1, j);
            }
            i++;
            j--;
        }
        return true;
    }
    
    public boolean helper(String s, int i, int j){
        
        while(i < j){
            if(s.charAt(i) != s.charAt(j)){
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
}
