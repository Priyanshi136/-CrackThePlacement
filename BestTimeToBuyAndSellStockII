class Solution {
    public int maxProfit(int[] prices) {
        
        // A bit optimized then the previous approach, did in single pass.i.e. only comparing with the previous one.
        // Hence time-> O(n), space -> O(1).
        int max = 0;
        for(int i = 1; i < prices.length; i++){
            if(prices[i] > prices[i-1]){
                max += prices[i] - prices[i-1];
            }
        }
        return max;
        
        // A peak valley approach, where we maintain out local minima and maxima to maximze our profit. Hence  time-> O(n2)[two pass], space -> O(1)
        // For better visualisation use a graph.
        // int count = 0;
        // int min = prices[0];
        // int max = prices[0];
        // int i = 1;
        // while(i < prices.length-1){
        //     if(prices[i] < prices[i-1] && prices[i] < prices[i+1]){
        //         min = prices[i];
        //         for(int j = i+1; j < prices.length; j++){
        //             if(prices[j] > prices[j-1] && prices[j] > prices[j+1]){
        //                 max = prices[j];
        //                 i = j+1;
        //                 break;
        //             }
        //         }
        //         count += max - min;
        //     }
        // }
        // return count;
        
        
    }
    
    // A approach through recursion, yet to implement.(Brute force)
//     public int maxProfit(int[] prices, int start){
        
//         if(start >= prices.length){
//             return 0;
//         }
        
//         int maxProfit = 0;
//         for(int i = start; i < prices.length-1; i++){
            
            
//             if(prices[i+1] > prices[i]){
//                 int profit = prices[i+1] - prices[i];
//             }
//         }
        
    // }
}
