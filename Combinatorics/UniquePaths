class Solution {
    public int uniquePaths(int m, int n) {
        
        // M-3 -> Optimized approach, using combinatorics.
        // Hence, time-> O(m-1) or O(n-1), and space-> O(1).
        int N = m+n-2;
        int r = m-1;
        double res = 1;
        
        for(int i = 1; i <= r; i++){
            res = res * (N-r+i)/i;
        }
        
        return (int)res;
        
        // int dp[][] = new int[m][n];
        // for(int i = 0; i < m; i++){
        //     for(int j = 0; j < n; j++){
        //         dp[i][j] = -1;
        //     }
        // }
        // return uniquePaths(0, 0, m, n, dp);
        
        // return uniquePaths(0, 0, m, n);
    }
    
    
    
    // M-2 -> Better approach, using dp, hence reducing the overlapping calls.
    // time-> O(m*n) , and space-> O(m*n).
//     public int uniquePaths(int i, int j, int m, int n, int[][] dp){
        
//         if(i >= m|| j >= n){
//             return 0;
//         }
        
//         if(i == m-1 && j == n-1){
//             return 1;
//         }
        
//         if(dp[i][j] != -1){
//             return dp[i][j];
//         }else{
//             dp[i][j] = uniquePaths(i+1, j, m, n, dp) + uniquePaths(i, j+1, m, n, dp);
//             return dp[i][j];
//         }
        
//     }
    
    
    
    // M-1 -> Brute force, using recursion. As, both the space and time complexity is exponential.
//     public int uniquePaths(int i, int j, int m, int n){
        
//         if(i >= m|| j >= n){
//             return 0;
//         }
        
//         int ans = uniquePaths(i+1, j, m, n) + uniquePaths(i, j+1, m, n);
//         if(i == m-1 && j == n-1){
//             ans += 1;
//         }
        
//         return ans;
//     }
}
